import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.163cb002.js";
const __pageData = JSON.parse('{"title":"Projections","description":"","frontmatter":{},"headers":[{"level":2,"title":"EventProcessor","slug":"eventprocessor","link":"#eventprocessor","children":[]},{"level":2,"title":"Projection","slug":"projection","link":"#projection","children":[{"level":3,"title":"AddEventHandler","slug":"addeventhandler","link":"#addeventhandler","children":[]}]},{"level":2,"title":"IEventHandler","slug":"ieventhandler","link":"#ieventhandler","children":[{"level":3,"title":"IEventHandlerContext","slug":"ieventhandlercontext","link":"#ieventhandlercontext","children":[]}]},{"level":2,"title":"IProjectionRepository","slug":"iprojectionrepository","link":"#iprojectionrepository","children":[{"level":3,"title":"GetSequenceNumber","slug":"getsequencenumber","link":"#getsequencenumber","children":[]},{"level":3,"title":"SetSequenceNumber","slug":"setsequencenumber","link":"#setsequencenumber","children":[]},{"level":3,"title":"Find","slug":"find","link":"#find","children":[]},{"level":3,"title":"Save","slug":"save","link":"#save","children":[]}]}],"relativePath":"projections/overview.md"}');
const _sfc_main = { name: "projections/overview.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="projections" tabindex="-1">Projections <a class="header-anchor" href="#projections" aria-hidden="true">#</a></h1><p>Event processing relates to the <em>Query Responsibility</em> side of the <em>Command/Query Responsibility Segregation</em> pattern.</p><p>Since the event sourcing side of things produces a series of events that are chronologically ordered we can process those events one after the other to produce any output structures that are required for reporting, querying, or business intelligence.</p><p>Each one of these processing streams is called a <strong>projection</strong>. Any single projection has to process events in a serial fashion. This means that the only parallel processing that is possible is to have mutliple projections where each processes a different set of events.</p><h2 id="eventprocessor" tabindex="-1">EventProcessor <a class="header-anchor" href="#eventprocessor" aria-hidden="true">#</a></h2><p>An <code>EventProcessor</code> instance is used to manage all the projections. <code>EventProjection</code> instances may be added to the <code>EventProcessor</code> and each runs on its own thread. In contrast to normal message processing there is no <strong>poison</strong> queue and no retries.</p><h2 id="projection" tabindex="-1">Projection <a class="header-anchor" href="#projection" aria-hidden="true">#</a></h2><p>A <code>Projection</code> has a name and represents a specific set of output data that you are interested in. Each projection is a logical queue that has a current position within the event stream. All event sources messages should have a global sequence number that is used as a <em>cursor</em> of sorts.</p><p>When you need to rebuild your read model for whatever reason you can simply delete the read model, reset the projection&#39;s position back to zero (or delete it), and re-run the projection.</p><h3 id="addeventhandler" tabindex="-1">AddEventHandler <a class="header-anchor" href="#addeventhandler" aria-hidden="true">#</a></h3><p>In order to be able to handle any events in your projection you will need to add event handlers using the <code>AddEventHandler</code> method using the <code>EventStoreBuilder</code>:</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#A6ACCD;">services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddEventStore</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddEventHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ProjectionNameHandler</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ProjectionName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">});</span></span>\n<span class="line"></span></code></pre></div><h2 id="ieventhandler" tabindex="-1">IEventHandler <a class="header-anchor" href="#ieventhandler" aria-hidden="true">#</a></h2><p>An event handler must implement the <code>IEventHandler</code> interface:</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> Shuttle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Recall</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEventHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ProcessEvent</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IEventHandlerContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="ieventhandlercontext" tabindex="-1">IEventHandlerContext <a class="header-anchor" href="#ieventhandlercontext" aria-hidden="true">#</a></h3><p>The event handler context provides the full <code>EventEnvelope</code> and <code>PrimitiveEvent</code>, the actual deserialized domain <code>Event</code> containing the original data that was added to the <code>EventStream</code>, and the <code>CancellationToken</code> that you can interrogate to determine if the processing is still active.</p><h2 id="iprojectionrepository" tabindex="-1">IProjectionRepository <a class="header-anchor" href="#iprojectionrepository" aria-hidden="true">#</a></h2><p>The <code>IProjectionRepository</code> interface is implemented by a technology-specific package. The <code>Shuttle.Recall.Sql.EventProcessing</code> package provides a Sql Server based implementation of the <code>IProjectionRepository</code>.</p><h3 id="getsequencenumber" tabindex="-1">GetSequenceNumber <a class="header-anchor" href="#getsequencenumber" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetSequenceNumber</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns the <code>SequenceNumber</code> position of the last event that was processed for the projection with the specified <code>name</code>.</p><h3 id="setsequencenumber" tabindex="-1">SetSequenceNumber <a class="header-anchor" href="#setsequencenumber" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SetSequenceNumber</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sequenceNumber</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Sets the <code>SequenceNumber</code> position of the projection with the given &#39;name&#39;.</p><h3 id="find" tabindex="-1">Find <a class="header-anchor" href="#find" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">Projection</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Find</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns the <code>Projection</code> for the given <code>name</code>.</p><h3 id="save" tabindex="-1">Save <a class="header-anchor" href="#save" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Save</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Projection</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">projection</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Persists the current <code>projection</code> data.</p>', 31);
const _hoisted_32 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_32);
}
const overview = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  overview as default
};
