import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.adabc9dd.js";
const __pageData = '{"title":"Events","description":"","frontmatter":{},"headers":[{"level":2,"title":"EventStore","slug":"eventstore"},{"level":2,"title":"EventStream","slug":"eventstream"},{"level":3,"title":"Constructor","slug":"constructor"},{"level":3,"title":"Properties","slug":"properties"},{"level":3,"title":"Remove","slug":"remove"},{"level":3,"title":"IsEmpty","slug":"isempty"},{"level":3,"title":"CommitVersion","slug":"commitversion"},{"level":3,"title":"AddEvent","slug":"addevent"},{"level":3,"title":"AddSnapshot","slug":"addsnapshot"},{"level":3,"title":"ShouldSnapshot","slug":"shouldsnapshot"},{"level":3,"title":"AttemptSnapshot","slug":"attemptsnapshot"},{"level":3,"title":"CanSnapshot","slug":"cansnapshot"},{"level":3,"title":"EventsAfter","slug":"eventsafter"},{"level":3,"title":"NewEvents","slug":"newevents"},{"level":3,"title":"PastEvents","slug":"pastevents"},{"level":3,"title":"Apply","slug":"apply"},{"level":3,"title":"HasSnapshot","slug":"hassnapshot"},{"level":3,"title":"ConcurrencyInvariant","slug":"concurrencyinvariant"},{"level":3,"title":"EmptyInvariant","slug":"emptyinvariant"},{"level":3,"title":"Get","slug":"get"},{"level":3,"title":"GetRaw","slug":"getraw"},{"level":3,"title":"Remove","slug":"remove-1"},{"level":3,"title":"SaveEventStream","slug":"saveeventstream"},{"level":2,"title":"IKeyStore","slug":"ikeystore"},{"level":3,"title":"Contains","slug":"contains"},{"level":3,"title":"Get","slug":"get-1"},{"level":3,"title":"Remove","slug":"remove-2"},{"level":3,"title":"Add","slug":"add"},{"level":2,"title":"ITypeStore","slug":"itypestore"},{"level":3,"title":"Get","slug":"get-2"},{"level":3,"title":"Add","slug":"add-1"}],"relativePath":"events/overview.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h1><h2 id="eventstore" tabindex="-1">EventStore <a class="header-anchor" href="#eventstore" aria-hidden="true">#</a></h2><p>An <code>EventStream</code> contains events for a given <code>Guid</code> identifier and is kept outside of your object at all times. You do not need to keep track of the events (old or new) in a list within your object.</p><p>Your domain object should only be concerned about handling the relevant commands issued to it and returning one or more events from those methods. These will then be added to your <code>EventStream</code> before being persisted using an <code>IEventStore</code> implementation.</p><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IEventStore</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">store</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventStore</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">aggregate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Aggregate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddEvent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Move</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">moveCommand</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldSnapshot</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddSnapshot</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SaveEventStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsFalse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IsEmpty</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsTrue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IsEmpty</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><h2 id="eventstream" tabindex="-1">EventStream <a class="header-anchor" href="#eventstream" aria-hidden="true">#</a></h2><p>Typically you would not create an <code>EventStream</code> directly but rather make use of an <code>IEventStore</code> implementation. You would, however, add events to an <code>EventStream</code> and call the <code>Apply</code> method to apply all events within the stream to a given object.</p><p>An event stream has a <code>Guid</code> identifier that is the surrogate key used by the <code>IEventStore</code> for your aggregate. It also has a version number that starts at 0. Each time an event is added to the stream the version is incremented by 1 <strong>and</strong> the version number is assigned to the event. This version is also used to check for concurrency violations. When you <code>Get</code> an <code>EventStream</code> from an <code>IEventStore</code> implementation the initial version is saved. When you try to save the event stream and the version of the event stream in the store does not match the initial version of the stream an <code>EventStreamConcurrencyException</code> should be raised by the <code>IEventStore</code> implementation.</p><p>As you can imagine, over time an <code>EventStream</code> may become quite large. A <code>Snapshot</code> is just an ordinary event that is added as a snapshot and contains the current state of your aggregate. Since a snapshot is an event it has a specific version number. If the <code>IEventStore</code> finds a snapshot it is first applied and all events after the sansphot&#39;s version number are loaded and applied. In this way you can cut down on the number of events loaded. You can delete the snapshot at any time as all the events will then simply be loaded and a new snapshot can be added to the event stream if required.</p><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventStream</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventStream</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">events</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Event</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">snapshot</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Creates a new <code>EventStream</code> instance wityh the given properties.</p><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> Guid Id </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> int Version </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> Event Snapshot </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool Removed </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="remove" tabindex="-1">Remove <a class="header-anchor" href="#remove" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>This will set the <code>Removed</code> property to <code>true</code>. When the <code>EventStream</code> is saved using an <code>IEventStore</code> implementation it is the responsibility of the event store to remove all the events associated with the <code>Id</code>.</p><h3 id="isempty" tabindex="-1">IsEmpty <a class="header-anchor" href="#isempty" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool IsEmpty</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if there are no events in the stream; else <code>false</code>.</p><h3 id="commitversion" tabindex="-1">CommitVersion <a class="header-anchor" href="#commitversion" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CommitVersion</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>Makes the initial version of the stream the current version.</p><h3 id="addevent" tabindex="-1">AddEvent <a class="header-anchor" href="#addevent" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddEvent</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Adds a new event to the stream. This is any instance of any class. Events will be defined by your domain:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemAdded</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ProductId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Description</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">decimal</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Price</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itemAdded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemAdded</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            ProductId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">(),</span></span>\n<span class="line"><span style="color:#A6ACCD;">            Description </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SampleItem</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">            Price </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">125.50</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#A6ACCD;">                </span></span>\n<span class="line"><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddEvent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">itemAdded</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>It will be up to the event store implementation to serialize the event data and persist it.</p><h3 id="addsnapshot" tabindex="-1">AddSnapshot <a class="header-anchor" href="#addsnapshot" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddSnapshot</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Similar to the <code>AddEvent</code> method, the <code>AddSnapshot</code> method is used to add an object that represents the complete state of the aggregate at any point in time. It is essentially handled in the same way an event is. When a snapshot is available it is loaded first and then all events following the snapshot would be loaded. It is therefore important that your aggregate state is adequately represented by the snapshot object.</p><h3 id="shouldsnapshot" tabindex="-1">ShouldSnapshot <a class="header-anchor" href="#shouldsnapshot" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ShouldSnapshot</span><span style="color:#89DDFF;">(int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">snapshotEventCount</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if there are at least the <code>snapshotEventCount</code> number of events in the stream; else <code>false</code>. Once there are enough events in the stream a snapshot can be made.</p><h3 id="attemptsnapshot" tabindex="-1">AttemptSnapshot <a class="header-anchor" href="#attemptsnapshot" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AttemptSnapshot</span><span style="color:#89DDFF;">(int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">snapshotEventCount</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>This method works in conjunction with the <code>Apply</code> method. When an object instance is provided to the <code>Apply</code> method Recall will check whether the object implements the <code>ICanSnapshot</code> interface. If it does it means that the object can return a snapshot from the implement <code>GetSnapshotEvent</code> method.</p><p>The <code>AttemptSnaphot</code> will add a snapshot and return <code>true</code> if a snapshot could be added; else no snapshot will be added and <code>false</code> is returned.</p><h3 id="cansnapshot" tabindex="-1">CanSnapshot <a class="header-anchor" href="#cansnapshot" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool CanSnapshot </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if the object supplied to the <code>Apply</code> method implements the <code>ICanSnapshot</code> interface.</p><h3 id="eventsafter" tabindex="-1">EventsAfter <a class="header-anchor" href="#eventsafter" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventsAfter</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">@event</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public IEnumerable&lt;Event&gt; EventsAfter</span><span style="color:#89DDFF;">(int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">version</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns all the events after the given <code>version</code> or the <code>Version</code> of the given <code>@event</code>.</p><h3 id="newevents" tabindex="-1">NewEvents <a class="header-anchor" href="#newevents" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewEvents</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>Returns all the events added that have a version number higher than the initial stream version number.</p><h3 id="pastevents" tabindex="-1">PastEvents <a class="header-anchor" href="#pastevents" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PastEvents</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>Returns all events before, or equal to, the initial version of the stream.</p><h3 id="apply" tabindex="-1">Apply <a class="header-anchor" href="#apply" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Apply</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">public void Apply</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventHandlingMethodName</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Applies all the events in the stream against the given object by finding a method with the <code>eventHandlingMethodName</code>. The default name used is <code>On</code>. For each event type you would then need to have a <code>public</code> method with the relevant name that takes an instance of the event:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">On</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Sample</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Events</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">v1</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">SomeEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">someEvent</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    _someData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someEvent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SomeData</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="hassnapshot" tabindex="-1">HasSnapshot <a class="header-anchor" href="#hassnapshot" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool HasSnapshot </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if the stream contains a snapshot; else <code>false</code>.</p><h3 id="concurrencyinvariant" tabindex="-1">ConcurrencyInvariant <a class="header-anchor" href="#concurrencyinvariant" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ConcurrencyInvariant</span><span style="color:#89DDFF;">(int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">expectedVersion</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>If the event stream&#39;s version is not at the <code>expectedVersion</code> an <code>EventStreamConcurrencyException</code> is thrown.</p><h3 id="emptyinvariant" tabindex="-1">EmptyInvariant <a class="header-anchor" href="#emptyinvariant" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EmptyInvariant</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">stream</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>If the stream is empty an <code>EventStreamEmptyException</code> is thrown.</p><h1 id="ieventstore" tabindex="-1">IEventStore <a class="header-anchor" href="#ieventstore" aria-hidden="true">#</a></h1><p>An <code>IEventStore</code> implementation should be able to persis and retireve an <code>EventStream</code>:</p><h3 id="get" tabindex="-1">Get <a class="header-anchor" href="#get" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns a populated <code>EventStream</code> with any available snapshot applied.</p><h3 id="getraw" tabindex="-1">GetRaw <a class="header-anchor" href="#getraw" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetRaw</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns a populated <code>EventStream</code> that contains all events from version 0. No snapshot is applied.</p><h3 id="remove-1" tabindex="-1">Remove <a class="header-anchor" href="#remove-1" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>All events that belong to the given <code>id</code> are removed.</p><h3 id="saveeventstream" tabindex="-1">SaveEventStream <a class="header-anchor" href="#saveeventstream" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SaveEventStream</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventStream</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Persists the given <code>EventStream</code>. If it contains a snapshot the snapshot is also saved.</p><h2 id="ikeystore" tabindex="-1">IKeyStore <a class="header-anchor" href="#ikeystore" aria-hidden="true">#</a></h2><p>You are bound to run into situations where you have a business or other key that is required to be unique. Given that the <code>IEventStore</code> makes use of only surrogate keys the <code>IKeyStore</code> is used to create a unique list of keys associated with a given aggregate identifier.</p><p>Since the keys used in the key store have to be unique you should ensure that they contain enough information to be unique and have the intended meaning.</p><p>A key could be something such as <code>order-number:ord-001/2016</code> or even <code>customer-onboarding:id-number=0000005555089</code>.</p><h3 id="contains" tabindex="-1">Contains <a class="header-anchor" href="#contains" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Contains</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">key</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if the given <code>key</code> has an associated aggregate identifier.</p><h3 id="get-1" tabindex="-1">Get <a class="header-anchor" href="#get-1" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">Guid</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">key</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns the <code>Guid</code> associated with the given key; else <code>null</code>.</p><h3 id="remove-2" tabindex="-1">Remove <a class="header-anchor" href="#remove-2" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">key</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>When specifying the <code>key</code> the assocation with the identifier will be removed. When specifying the <code>id</code> all keys associated with the given <code>id</code> will be removed.</p><h3 id="add" tabindex="-1">Add <a class="header-anchor" href="#add" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">key</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Createds an association between the <code>id</code> and the <code>key</code>.</p><h2 id="itypestore" tabindex="-1">ITypeStore <a class="header-anchor" href="#itypestore" aria-hidden="true">#</a></h2><p>You wouldn&#39;t typically interact directly with an <code>ITypeStore</code> implementation. Each event type is stored in the type store using its fully qualified assembly type. Since this is a rather significantly sized string it is assigned a unique <code>Guid</code> and this identifier is used when storing events.</p><h3 id="get-2" tabindex="-1">Get <a class="header-anchor" href="#get-2" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns the <code>Guid</code> identifier for the given <code>type</code>.</p><h3 id="add-1" tabindex="-1">Add <a class="header-anchor" href="#add-1" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Adds a new <code>type</code> to the store and returns the <code>Guid</code> identifier assigned to it.</p>', 101);
const _hoisted_102 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_102);
}
var overview = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, overview as default };
