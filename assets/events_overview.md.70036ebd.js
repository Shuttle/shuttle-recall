import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.51e1bcce.js";
const __pageData = JSON.parse('{"title":"Events","description":"","frontmatter":{},"headers":[{"level":2,"title":"EventStore","slug":"eventstore","link":"#eventstore","children":[]},{"level":2,"title":"EventStream","slug":"eventstream","link":"#eventstream","children":[{"level":3,"title":"Constructor","slug":"constructor","link":"#constructor","children":[]},{"level":3,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":3,"title":"Remove","slug":"remove","link":"#remove","children":[]},{"level":3,"title":"Commit","slug":"commit","link":"#commit","children":[]},{"level":3,"title":"AddEvent","slug":"addevent","link":"#addevent","children":[]},{"level":3,"title":"AddSnapshot","slug":"addsnapshot","link":"#addsnapshot","children":[]},{"level":3,"title":"ShouldSave","slug":"shouldsave","link":"#shouldsave","children":[]},{"level":3,"title":"GetEvents","slug":"getevents","link":"#getevents","children":[]},{"level":3,"title":"Apply","slug":"apply","link":"#apply","children":[]},{"level":3,"title":"ConcurrencyInvariant","slug":"concurrencyinvariant","link":"#concurrencyinvariant","children":[]},{"level":3,"title":"Get","slug":"get","link":"#get","children":[]},{"level":3,"title":"Remove","slug":"remove-1","link":"#remove-1","children":[]},{"level":3,"title":"Save","slug":"save","link":"#save","children":[]}]},{"level":2,"title":"ITypeStore","slug":"itypestore","link":"#itypestore","children":[{"level":3,"title":"Get","slug":"get-1","link":"#get-1","children":[]},{"level":3,"title":"Add","slug":"add","link":"#add","children":[]}]}],"relativePath":"events/overview.md"}');
const _sfc_main = { name: "events/overview.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h1><h2 id="eventstore" tabindex="-1">EventStore <a class="header-anchor" href="#eventstore" aria-hidden="true">#</a></h2><p>An <code>EventStream</code> contains events for a given <code>Guid</code> identifier and is kept outside of your object at all times.</p><p>Your domain object would only be concerned about handling the relevant commands issued to it and returning one or more events from those methods. These will then be added to your <code>EventStream</code> before being persisted using an <code>IEventStore</code> implementation.</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">IEventStore</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">store</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventStore</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">aggregate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Aggregate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddEvent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Move</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">moveCommand</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;">// When youhave a substantial number of events </span></span>\n<span class="line"><span style="color:#676E95;">// you may want to add a snapshot, such as `ClosingBalance`/`OpeningBalance`.</span></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddSnapshot</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Save</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsFalse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IsEmpty</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">eventStream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">aggregate</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsTrue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eventStream</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">IsEmpty</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><h2 id="eventstream" tabindex="-1">EventStream <a class="header-anchor" href="#eventstream" aria-hidden="true">#</a></h2><p>Typically you would not create an <code>EventStream</code> directly but rather make use of an <code>IEventStore</code> implementation. You would, however, add events to an <code>EventStream</code> and call the <code>Apply</code> method to apply all events within the stream to a given object.</p><p>An event stream has a <code>Guid</code> identifier that is the surrogate key used by the <code>IEventStore</code> for your aggregate. It also has a version number that starts at 0. Each time an event is added to the stream the version is incremented by 1 <strong>and</strong> the version number is assigned to the event. This version is also used to check for concurrency violations. When you <code>Get</code> an <code>EventStream</code> from an <code>IEventStore</code> implementation the initial version is saved. When you try to save the event stream and the version of the event stream in the store does not match the initial version of the stream an <code>EventStreamConcurrencyException</code> should be raised by the <code>IEventStore</code> implementation.</p><p>As you can imagine, over time an <code>EventStream</code> may become quite large. A <code>Snapshot</code> is just an ordinary event that is added as a snapshot and contains the current state of your aggregate. Since a snapshot is an event it has a specific version number. If the <code>IEventStore</code> finds a snapshot, it is first applied and all events after the sansphot&#39;s version number are loaded and applied. In this way you can cut down on the number of events loaded. You can delete the snapshot at any time as all the events will then simply be loaded and a new snapshot can be added to the event stream if required.</p><h3 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventStream</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEventMethodInvoker</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventMethodInvoker</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventStream</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DomainEvent</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">events</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEventMethodInvoker</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventMethodInvoker</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Creates a new <code>EventStream</code> instance wityh the given properties. The <code>IEventMethodInvoker</code> is responsible for invoking the relevant method related to the event on a provided aggregate instance.</p><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> Guid Id </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> int Version </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> object Snapshot </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> int </span><span style="color:#FFCB6B;">Count</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_events</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">Count </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> _appendedEvents</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Count</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool </span><span style="color:#FFCB6B;">IsEmpty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> Count </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool </span><span style="color:#FFCB6B;">HasSnapshot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> Snapshot </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>\n<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> bool Removed </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="remove" tabindex="-1">Remove <a class="header-anchor" href="#remove" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>This will set the <code>Removed</code> property to <code>true</code>. When the <code>EventStream</code> is saved using an <code>IEventStore</code> implementation it is the responsibility of the event store to remove all the events associated with the <code>Id</code>.</p><h3 id="commit" tabindex="-1">Commit <a class="header-anchor" href="#commit" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Commit</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>Adds any appended events to the events and makes the initial version of the stream the current version which is the version number of the last event appended.</p><h3 id="addevent" tabindex="-1">AddEvent <a class="header-anchor" href="#addevent" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddEvent</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Adds a new event to the stream with the next version number applied. This is any instance of any class. Events will be defined by your domain:</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemAdded</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ProductId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Description</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">decimal</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Price</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventStream</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">itemAdded</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ItemAdded</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            ProductId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">(),</span></span>\n<span class="line"><span style="color:#A6ACCD;">            Description </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SampleItem</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">            Price </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">125.50</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#A6ACCD;">                </span></span>\n<span class="line"><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddEvent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">itemAdded</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>It will be up to the event store implementation to serialize the event data and persist it.</p><h3 id="addsnapshot" tabindex="-1">AddSnapshot <a class="header-anchor" href="#addsnapshot" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AddSnapshot</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Similar to the <code>AddEvent</code> method, the <code>AddSnapshot</code> method is used to add an object that represents the complete state of the aggregate at any point in time. It is essentially handled in the same way an event is. When a snapshot is available it is loaded first and then all events following the snapshot would be loaded. It is therefore important that your aggregate state is adequately represented by the snapshot object.</p><h3 id="shouldsave" tabindex="-1">ShouldSave <a class="header-anchor" href="#shouldsave" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ShouldSave</span><span style="color:#89DDFF;">()</span></span>\n<span class="line"></span></code></pre></div><p>Returns <code>true</code> if there are are any appended events; else <code>false</code>.</p><h3 id="getevents" tabindex="-1">GetEvents <a class="header-anchor" href="#getevents" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DomainEvent</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetEvents</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">EventRegistrationType</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> EventRegistrationType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Appended</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>Returns the event represented by the given <code>EventRegistrationType</code>.</p><h3 id="apply" tabindex="-1">Apply <a class="header-anchor" href="#apply" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Apply</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Applies all the events in the stream against the given object by calling the <code>IEventMethodInvoker</code> provided to the event strean constructor.</p><p>The following is an example of an event method:</p><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">On</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Sample</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Events</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">v1</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">SomeEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">someEvent</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    _someData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someEvent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SomeData</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><h3 id="concurrencyinvariant" tabindex="-1">ConcurrencyInvariant <a class="header-anchor" href="#concurrencyinvariant" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ConcurrencyInvariant</span><span style="color:#89DDFF;">(int</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">expectedVersion</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>If the event stream&#39;s version is not at the <code>expectedVersion</code> an <code>EventStreamConcurrencyException</code> is thrown.</p><h1 id="ieventstore" tabindex="-1">IEventStore <a class="header-anchor" href="#ieventstore" aria-hidden="true">#</a></h1><p>An <code>IEventStore</code> implementation should be able to persis and retireve an <code>EventStream</code>:</p><h3 id="get" tabindex="-1">Get <a class="header-anchor" href="#get" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns a populated <code>EventStream</code> with any available snapshot applied.</p><h3 id="remove-1" tabindex="-1">Remove <a class="header-anchor" href="#remove-1" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">id</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>All events that belong to the given <code>id</code> are removed.</p><h3 id="save" tabindex="-1">Save <a class="header-anchor" href="#save" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Save</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventStream</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#89DDFF;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Save</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">EventStream</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventStream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Action</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EventEnvelopeBuilder</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">builder</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Persists the given <code>EventStream</code>. If it contains a snapshot the snapshot is also saved.</p><h2 id="itypestore" tabindex="-1">ITypeStore <a class="header-anchor" href="#itypestore" aria-hidden="true">#</a></h2><p>You wouldn&#39;t typically interact directly with an <code>ITypeStore</code> implementation. Each event type is stored in the type store using its fully qualified assembly type. Since this is a rather significantly sized string it is assigned a unique <code>Guid</code> and this identifier is used when storing events.</p><h3 id="get-1" tabindex="-1">Get <a class="header-anchor" href="#get-1" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Returns the <code>Guid</code> identifier for the given <code>type</code>.</p><h3 id="add" tabindex="-1">Add <a class="header-anchor" href="#add" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Adds a new <code>type</code> to the store and returns the <code>Guid</code> identifier assigned to it.</p>', 61);
const _hoisted_62 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_62);
}
const overview = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  overview as default
};
