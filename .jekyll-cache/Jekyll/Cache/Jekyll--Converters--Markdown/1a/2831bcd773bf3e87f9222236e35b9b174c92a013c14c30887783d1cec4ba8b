I"Àn<h1 id="overview">Overview</h1>

<p>An <code class="language-plaintext highlighter-rouge">EventStream</code> contains events for a given <code class="language-plaintext highlighter-rouge">Guid</code> identifier and is kept outside of your object at all times.  You do not need to keep track of the events (old or new) in a list within your object.</p>

<p>Your domain object should only be concerned about handling the relevant commands issued to it and returning one or more events from those methods.  These will then be added to your <code class="language-plaintext highlighter-rouge">EventStream</code> before being persisted using an <code class="language-plaintext highlighter-rouge">IEventStore</code> implementation.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IEventStore</span> <span class="n">store</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventStore</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">aggregate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Aggregate</span><span class="p">(</span><span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">());</span>
<span class="kt">var</span> <span class="n">eventStream</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

<span class="n">eventStream</span><span class="p">.</span><span class="nf">AddEvent</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="nf">Move</span><span class="p">(</span><span class="n">moveCommand</span><span class="p">));</span>

<span class="k">if</span> <span class="p">(</span><span class="n">eventStream</span><span class="p">.</span><span class="nf">ShouldSnapshot</span><span class="p">(</span><span class="m">100</span><span class="p">))</span>
<span class="p">{</span>
    <span class="n">eventStream</span><span class="p">.</span><span class="nf">AddSnapshot</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">State</span><span class="p">);</span>
<span class="p">}</span>
    
<span class="n">store</span><span class="p">.</span><span class="nf">SaveEventStream</span><span class="p">(</span><span class="n">eventStream</span><span class="p">);</span>

<span class="n">eventStream</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

<span class="n">Assert</span><span class="p">.</span><span class="nf">IsFalse</span><span class="p">(</span><span class="n">eventStream</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">);</span>

<span class="n">store</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

<span class="n">eventStream</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="n">aggregate</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>

<span class="n">Assert</span><span class="p">.</span><span class="nf">IsTrue</span><span class="p">(</span><span class="n">eventStream</span><span class="p">.</span><span class="n">IsEmpty</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="eventstream">EventStream</h1>

<p>Typically you would not create an <code class="language-plaintext highlighter-rouge">EventStream</code> directly but rather make use of an <code class="language-plaintext highlighter-rouge">IEventStore</code> implementation.  You would, however, add events to an <code class="language-plaintext highlighter-rouge">EventStream</code> and call the <code class="language-plaintext highlighter-rouge">Apply</code> method to apply all events within the stream to a given object.</p>

<p>An event stream has a <code class="language-plaintext highlighter-rouge">Guid</code> identifier that is the surrogate key used by the <code class="language-plaintext highlighter-rouge">IEventStore</code> for your aggregate.  It also has a version number that starts at 0.  Each time an event is added to the stream the version is incremented by 1 <strong>and</strong> the version number is assigned to the event.  This version is also used to check for concurrency violations.  When you <code class="language-plaintext highlighter-rouge">Get</code> an <code class="language-plaintext highlighter-rouge">EventStream</code> from an <code class="language-plaintext highlighter-rouge">IEventStore</code> implementation the initial version is saved.  When you try to save the event stream and the version of the event stream in the store does not match the initial version of the stream an <code class="language-plaintext highlighter-rouge">EventStreamConcurrencyException</code> should be raised by the <code class="language-plaintext highlighter-rouge">IEventStore</code> implementation.</p>

<p>As you can imagine, over time an <code class="language-plaintext highlighter-rouge">EventStream</code> may become quite large.  A <code class="language-plaintext highlighter-rouge">Snapshot</code> is just an ordinary event that is added as a snapshot and contains the current state of your aggregate.  Since a snapshot is an event it has a specific version number.  If the <code class="language-plaintext highlighter-rouge">IEventStore</code> finds a snapshot it is first applied and all events after the sansphotâ€™s version number are loaded and applied.  In this way you can cut down on the number of events loaded.  You can delete the snapshot at any time as all the events will then simply be loaded and a new snapshot can be added to the event stream if required.</p>

<h3 id="constructor">Constructor</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="nf">EventStream</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
<span class="k">public</span> <span class="nf">EventStream</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">int</span> <span class="n">version</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">events</span><span class="p">,</span> <span class="n">Event</span> <span class="n">snapshot</span><span class="p">)</span>
</code></pre></div></div>

<p>Creates a new <code class="language-plaintext highlighter-rouge">EventStream</code> instance wityh the given properties.</p>

<h3 id="properties">Properties</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="k">public</span> <span class="kt">int</span> <span class="n">Version</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="k">public</span> <span class="n">Event</span> <span class="n">Snapshot</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="k">public</span> <span class="kt">bool</span> <span class="n">Removed</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="remove">Remove</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">Remove</span><span class="p">()</span>
</code></pre></div></div>

<p>This will set the <code class="language-plaintext highlighter-rouge">Removed</code> property to <code class="language-plaintext highlighter-rouge">true</code>.  When the <code class="language-plaintext highlighter-rouge">EventStream</code> is saved using an <code class="language-plaintext highlighter-rouge">IEventStore</code> implementation it is the responsibility of the event store to remove all the events associated with the <code class="language-plaintext highlighter-rouge">Id</code>.</p>

<h3 id="isempty">IsEmpty</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsEmpty</span>
</code></pre></div></div>

<p>Returns <code class="language-plaintext highlighter-rouge">true</code> if there are no events in the stream; else <code class="language-plaintext highlighter-rouge">false</code>.</p>

<h3 id="commitversion">CommitVersion</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">CommitVersion</span><span class="p">()</span>
</code></pre></div></div>

<p>Makes the initial version of the stream the current version.</p>

<h3 id="addevent">AddEvent</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">AddEvent</span><span class="p">(</span><span class="kt">object</span> <span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>Adds a new event to the stream.  This is any instance of any class.  Events will be defined by your domain:</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ItemAdded</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">Guid</span> <span class="n">ProductId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">decimal</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventStream</span><span class="p">(</span><span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">());</span>

<span class="kt">var</span> <span class="n">itemAdded</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ItemAdded</span>
        <span class="p">{</span>
            <span class="n">ProductId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">(),</span>
            <span class="n">Description</span> <span class="p">=</span> <span class="s">"SampleItem"</span><span class="p">,</span>
            <span class="n">Price</span> <span class="p">=</span> <span class="m">125.50</span>
        <span class="p">};</span>
                
<span class="n">stream</span><span class="p">.</span><span class="nf">AddEvent</span><span class="p">(</span><span class="n">itemAdded</span><span class="p">);</span>
</code></pre></div></div>

<p>It will be up to the event store implementation to serialize the event data and persist it.</p>

<h3 id="addsnapshot">AddSnapshot</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">AddSnapshot</span><span class="p">(</span><span class="kt">object</span> <span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>Similar to the <code class="language-plaintext highlighter-rouge">AddEvent</code> method, the <code class="language-plaintext highlighter-rouge">AddSnapshot</code> method is used to add an object that represents the complete state of the aggregate at any point in time.  It is essentially handled in the same way an event is.  When a snapshot is available it is loaded first and then all events following the snapshot would be loaded.  It is therefore important that your aggregate state is adequately represented by the snapshot object.</p>

<h3 id="shouldsnapshot">ShouldSnapshot</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">bool</span> <span class="nf">ShouldSnapshot</span><span class="p">(</span><span class="kt">int</span> <span class="n">snapshotEventCount</span><span class="p">)</span>
</code></pre></div></div>

<p>Returns <code class="language-plaintext highlighter-rouge">true</code> if there are at least the <code class="language-plaintext highlighter-rouge">snapshotEventCount</code> number of events in the stream; else <code class="language-plaintext highlighter-rouge">false</code>.  Once there are enough events in the stream a snapshot can be made.</p>

<h3 id="attemptsnapshot">AttemptSnapshot</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">bool</span> <span class="nf">AttemptSnapshot</span><span class="p">(</span><span class="kt">int</span> <span class="n">snapshotEventCount</span><span class="p">)</span>
</code></pre></div></div>

<p>This method works in conjunction with the <code class="language-plaintext highlighter-rouge">Apply</code> method.  When an object instance is provided to the <code class="language-plaintext highlighter-rouge">Apply</code> method Recall will check whether the object implements the <code class="language-plaintext highlighter-rouge">ICanSnapshot</code> interface.  If it does it means that the object can return a snapshot from the implement <code class="language-plaintext highlighter-rouge">GetSnapshotEvent</code> method.</p>

<p>The <code class="language-plaintext highlighter-rouge">AttemptSnaphot</code> will add a snapshot and return <code class="language-plaintext highlighter-rouge">true</code> if a snapshot could be added; else no snapshot will be added and <code class="language-plaintext highlighter-rouge">false</code> is returned.</p>

<h3 id="cansnapshot">CanSnapshot</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">bool</span> <span class="n">CanSnapshot</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>Returns <code class="language-plaintext highlighter-rouge">true</code> if the object supplied to the <code class="language-plaintext highlighter-rouge">Apply</code> method implements the <code class="language-plaintext highlighter-rouge">ICanSnapshot</code> interface.</p>

<h3 id="eventsafter">EventsAfter</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="nf">EventsAfter</span><span class="p">(</span><span class="n">Event</span> <span class="n">@event</span><span class="p">)</span>
<span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="nf">EventsAfter</span><span class="p">(</span><span class="kt">int</span> <span class="n">version</span><span class="p">)</span>
</code></pre></div></div>

<p>Returns all the events after the given <code class="language-plaintext highlighter-rouge">version</code> or the <code class="language-plaintext highlighter-rouge">Version</code> of the given <code class="language-plaintext highlighter-rouge">@event</code>.</p>

<h3 id="newevents">NewEvents</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="nf">NewEvents</span><span class="p">()</span>
</code></pre></div></div>

<p>Returns all the events added that have a version number higher than the initial stream version number.</p>

<h3 id="pastevents">PastEvents</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="nf">PastEvents</span><span class="p">()</span>
</code></pre></div></div>

<p>Returns all events before, or equal to, the initial version of the stream.</p>

<h3 id="apply">Apply</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">Apply</span><span class="p">(</span><span class="kt">object</span> <span class="n">instance</span><span class="p">)</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Apply</span><span class="p">(</span><span class="kt">object</span> <span class="n">instance</span><span class="p">,</span> <span class="kt">string</span> <span class="n">eventHandlingMethodName</span><span class="p">)</span>
</code></pre></div></div>

<p>Applies all the events in the stream against the given object by finding a method with the <code class="language-plaintext highlighter-rouge">eventHandlingMethodName</code>.  The default name used is <code class="language-plaintext highlighter-rouge">On</code>.  For each event type you would then need to have a <code class="language-plaintext highlighter-rouge">public</code> method with the relevant name that takes an instance of the event:</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">On</span><span class="p">(</span><span class="n">Sample</span><span class="p">.</span><span class="n">Events</span><span class="p">.</span><span class="n">v1</span><span class="p">.</span><span class="n">SomeEvent</span> <span class="n">someEvent</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_someData</span> <span class="p">=</span> <span class="n">someEvent</span><span class="p">.</span><span class="n">SomeData</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="hassnapshot">HasSnapshot</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">bool</span> <span class="n">HasSnapshot</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>Returns <code class="language-plaintext highlighter-rouge">true</code> if the stream contains a snapshot; else <code class="language-plaintext highlighter-rouge">false</code>.</p>

<h3 id="concurrencyinvariant">ConcurrencyInvariant</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConcurrencyInvariant</span><span class="p">(</span><span class="kt">int</span> <span class="n">expectedVersion</span><span class="p">)</span>
</code></pre></div></div>

<p>If the event streamâ€™s version is not at the <code class="language-plaintext highlighter-rouge">expectedVersion</code> an <code class="language-plaintext highlighter-rouge">EventStreamConcurrencyException</code> is thrown.</p>

<h3 id="emptyinvariant">EmptyInvariant</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">EmptyInvariant</span><span class="p">(</span><span class="k">this</span> <span class="n">EventStream</span> <span class="n">stream</span><span class="p">)</span>
</code></pre></div></div>

<p>If the stream is empty an <code class="language-plaintext highlighter-rouge">EventStreamEmptyException</code> is thrown.</p>

<h1 id="ieventstore">IEventStore</h1>

<p>An <code class="language-plaintext highlighter-rouge">IEventStore</code> implementation should be able to persis and retireve an <code class="language-plaintext highlighter-rouge">EventStream</code>:</p>

<h3 id="get">Get</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EventStream</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns a populated <code class="language-plaintext highlighter-rouge">EventStream</code> with any available snapshot applied.</p>

<h3 id="getraw">GetRaw</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EventStream</span> <span class="nf">GetRaw</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns a populated <code class="language-plaintext highlighter-rouge">EventStream</code> that contains all events from version 0.  No snapshot is applied.</p>

<h3 id="remove-1">Remove</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">Remove</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">);</span>
</code></pre></div></div>

<p>All events that belong to the given <code class="language-plaintext highlighter-rouge">id</code> are removed.</p>

<h3 id="saveeventstream">SaveEventStream</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">SaveEventStream</span><span class="p">(</span><span class="n">EventStream</span> <span class="n">eventStream</span><span class="p">);</span>
</code></pre></div></div>

<p>Persists the given <code class="language-plaintext highlighter-rouge">EventStream</code>.  If it contains a snapshot the snapshot is also saved.</p>

<h1 id="ikeystore">IKeyStore</h1>

<p>You are bound to run into situations where you have a business or other key that is required to be unique.  Given that the <code class="language-plaintext highlighter-rouge">IEventStore</code> makes use of only surrogate keys the <code class="language-plaintext highlighter-rouge">IKeyStore</code> is used to create a unique list of keys associated with a given aggregate identifier.</p>

<p>Since the keys used in the key store have to be unique you should ensure that they contain enough information to be unique and have the intended meaning.</p>

<p>A key could be something such as <code class="language-plaintext highlighter-rouge">order-number:ord-001/2016</code> or even <code class="language-plaintext highlighter-rouge">customer-onboarding:id-number=0000005555089</code>.</p>

<h3 id="contains">Contains</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">Contains</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns <code class="language-plaintext highlighter-rouge">true</code> if the given <code class="language-plaintext highlighter-rouge">key</code> has an associated aggregate identifier.</p>

<h3 id="get-1">Get</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Guid</span><span class="p">?</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns the <code class="language-plaintext highlighter-rouge">Guid</code> associated with the given key; else <code class="language-plaintext highlighter-rouge">null</code>.</p>

<h3 id="remove-2">Remove</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">Remove</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
<span class="k">void</span> <span class="nf">Remove</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">);</span>
</code></pre></div></div>

<p>When specifying the <code class="language-plaintext highlighter-rouge">key</code> the assocation with the identifier will be removed.  When specifying the <code class="language-plaintext highlighter-rouge">id</code> all keys associated with the given <code class="language-plaintext highlighter-rouge">id</code> will be removed.</p>

<h3 id="add">Add</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
</code></pre></div></div>

<p>Createds an association between the <code class="language-plaintext highlighter-rouge">id</code> and the <code class="language-plaintext highlighter-rouge">key</code>.</p>

<h1 id="itypestore">ITypeStore</h1>

<p>You wouldnâ€™t typically interact directly with an <code class="language-plaintext highlighter-rouge">ITypeStore</code> implementation.  Each event type is stored in the type store using its fully qualified assembly type.  Since this is a rather significantly sized string it is assigned a unique <code class="language-plaintext highlighter-rouge">Guid</code> and this identifier is used when storing events.</p>

<h3 id="get-2">Get</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Guid</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns the <code class="language-plaintext highlighter-rouge">Guid</code> identifier for the given <code class="language-plaintext highlighter-rouge">type</code>.</p>

<h3 id="add-1">Add</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Guid</span> <span class="nf">Add</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">);</span>
</code></pre></div></div>

<p>Adds a new <code class="language-plaintext highlighter-rouge">type</code> to the store and returns the <code class="language-plaintext highlighter-rouge">Guid</code> identifier assigned to it.</p>
:ET