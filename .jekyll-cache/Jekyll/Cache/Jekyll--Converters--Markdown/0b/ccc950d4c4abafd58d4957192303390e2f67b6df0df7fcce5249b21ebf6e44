I"¿<h1 id="overview">Overview</h1>

<p>Event processing relates to the <em>Query Responsibility</em> side of the <em>Command/Query Responsibility Segregation</em> pattern.</p>

<p>Since the event sourcing side of things produces a series of events that are chronologically ordered we can process those events one after the other to produce any output structures that are required for reporting, querying, or business intelligence.</p>

<p>Each one of these processing streams is called a <strong>projection</strong>.  Any single projection has to process events in a serial fashion.  This means that the only parallel processing that is possible is to have mutliple projections where each processes a different set of events.</p>

<h2 id="eventprocessor">EventProcessor</h2>

<p>An <code class="language-plaintext highlighter-rouge">EventProcessor</code> instance is used to manage all the projections.  <code class="language-plaintext highlighter-rouge">EventProjection</code> instances may be added to the <code class="language-plaintext highlighter-rouge">EventProcessor</code> and each runs on its own thread.  In contrast to normal message processing there is no <strong>poison</strong> queue and no retries.</p>

<h2 id="eventprojection">EventProjection</h2>

<p>An <code class="language-plaintext highlighter-rouge">EventProjection</code> has a name and represents a specific set of output data that you are interested in.  Each projection is a logical queue that has a current position within the event source message data.  All event sources messages should have a global sequence number that is used as a <em>cursor</em> of sorts.</p>

<p>When you need to rebuild your read model for whatever reason you can simply delete the read model, reset the projectionâ€™s position back to zero (or delete it), and re-run the projection.</p>

<h3 id="addeventhandler">AddEventHandler</h3>

<p>In order to be able to handle any events in your projection you will need to add event handlers using the <code class="language-plaintext highlighter-rouge">AddEventHandler</code> method.</p>

<h2 id="ieventhandler">IEventHandler</h2>

<p>An event handler must implement the <code class="language-plaintext highlighter-rouge">IEventHandler</code> interface:</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">Shuttle.Recall</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">interface</span> <span class="nc">IEventHandler</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span>
    <span class="err">{</span>
        <span class="nc">void</span> <span class="nf">ProcessEvent</span><span class="p">(</span><span class="n">IEventHandlerContext</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">context</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="ieventhandlercontext">IEventHandlerContext</h3>

<p>The event handler context provides The full <code class="language-plaintext highlighter-rouge">ProjectionEvent</code>, the actual deserialized <code class="language-plaintext highlighter-rouge">DomainEvent</code> containing the original data that was added to the <code class="language-plaintext highlighter-rouge">EventStream</code>, and the <code class="language-plaintext highlighter-rouge">ActiveState</code> that you can interrogate to determine if the processing is still active.</p>

<h2 id="iprojectionservice">IProjectionService</h2>

<p>The <code class="language-plaintext highlighter-rouge">IProjectionService</code> interface is implemented by a technology-specific package.  The <code class="language-plaintext highlighter-rouge">Shuttle.Recall.SqlServer</code> package provides a Sql Server based implementation of the <code class="language-plaintext highlighter-rouge">IProjectionService</code>.</p>

<h3 id="getsequencenumber">GetSequenceNumber</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="nf">GetSequenceNumber</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns the <code class="language-plaintext highlighter-rouge">SequenceNumber</code> position of the last event that was processed for the projection with the specified <code class="language-plaintext highlighter-rouge">name</code>.</p>

<h3 id="setsequencenumber">SetSequenceNumber</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">SetSequenceNumber</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">long</span> <span class="n">sequenceNumber</span><span class="p">);</span>
</code></pre></div></div>

<p>Sets the <code class="language-plaintext highlighter-rouge">SequenceNumber</code> position of the projection with the given â€˜nameâ€™.</p>

<h3 id="getevent">GetEvent</h3>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ProjectionEvent</span> <span class="nf">GetEvent</span><span class="p">(</span><span class="kt">long</span> <span class="n">sequenceNumber</span><span class="p">);</span>
<span class="n">ProjectionEvent</span> <span class="nf">GetEvent</span><span class="p">(</span><span class="kt">long</span> <span class="n">sequenceNumber</span><span class="p">,</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Type</span><span class="p">&gt;</span> <span class="n">eventTypes</span><span class="p">);</span>
</code></pre></div></div>

<p>Returns the <code class="language-plaintext highlighter-rouge">ProjectionEvent</code> for the given <code class="language-plaintext highlighter-rouge">sequenceNumber</code>.  When the <code class="language-plaintext highlighter-rouge">eventTypes</code> is specified the next <code class="language-plaintext highlighter-rouge">ProjectionEvent</code> equal to of after the given <code class="language-plaintext highlighter-rouge">sequenceNumber</code> is returned that has an event type in the given <code class="language-plaintext highlighter-rouge">eventTypes</code> collection.</p>
:ET